{
  "permissions": {
    "allow": [
      "Bash(node:*)",
      "Bash(npm --version)",
      "Bash(npx create-next-app@latest:*)",
      "Bash(npm install)",
      "Bash(npm run dev)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(gh auth:*)",
      "Bash(git config:*)",
      "Bash(where gh)",
      "Bash(git remote add:*)",
      "Bash(git branch:*)",
      "Bash(git push:*)",
      "Bash(git remote remove:*)",
      "Bash(winget:*)",
      "Bash(npm install:*)",
      "Bash(vercel:*)",
      "Bash(tree:*)",
      "Bash(awk:*)",
      "Bash(npm run build)",
      "Bash(npm audit:*)",
      "Bash(timeout:*)",
      "Bash(npx playwright install:*)",
      "Bash(mkdir:*)",
      "Bash(dir:*)",
      "Bash(npx:*)",
      "Read(//c/Users/march/.claude/**)",
      "Bash(git log:*)",
      "Bash(gh repo view:*)",
      "Bash(git remote get-url:*)",
      "Bash(npm uninstall:*)",
      "Bash(git mv:*)",
      "Bash(tasklist)",
      "Bash(findstr:*)",
      "Bash(robocopy:*)",
      "Bash(xcopy:*)",
      "Bash(taskkill:*)",
      "Bash(powershell:*)",
      "Bash(find:*)",
      "Bash(for img in \"ceo-presentation-stage.jpg\" \"guests-photo.jpg\" \"finalists-group.jpg\" \"best-of-miss-poster.jpg\")",
      "Bash(do echo \"=== $img ===\")",
      "Bash(done)",
      "Bash(for img in \"best-of-miss-top3-poster.jpg\" \"best-of-miss-all-guests.jpg\" \"wonderful-world-special-award-1.jpg\" \"wonderful-world-special-award-2.jpg\")",
      "Bash(do echo \"$img:\")",
      "Bash(xargs:*)",
      "Bash(while IFS= read -r file)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(npm run lint)",
      "Bash(for file in CHATBOT_FREE.md CHATBOT_HYBRID.md CHATBOT_README.md CHATBOT_SETUP.md CODE_REVIEW.md DEPLOY_NOW.md DEPLOY_STEPS.txt deploy-instructions.txt DEPLOYMENT_GUIDE.md DEVELOPMENT_ROADMAP.md GETTING_STARTED.md IMAGE_PLACEMENT_GUIDE.md PHASE2_COMPLETION_REPORT.md PROJECT_SUMMARY.md QUICK_DEPLOY.md SECURITY_AUDIT.md SITE_ARCHITECTURE.md TECHNICAL_SPEC.md)",
      "Bash(do if [ -f \"$file\" ])",
      "Bash(then mv \"$file\" docs/archive/)",
      "Bash(fi)",
      "Bash(git show:*)",
      "Bash(while read file)",
      "Bash(do basename \"$file\")",
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(chmod:*)",
      "Bash(cat:*)",
      "Bash(if [ -f \".env\" ])",
      "Bash(then grep \"GEMINI_API_KEY\" .env)",
      "Bash(else echo \".env file not found\")",
      "Bash(if [ -f \".env.production\" ])",
      "Bash(then cat .env.production)",
      "Bash(else echo \".env.production not found\")",
      "Bash(curl:*)",
      "Bash(nslookup:*)",
      "Bash(git restore:*)"
    ],
    "deny": [],
    "ask": []
  }
}
